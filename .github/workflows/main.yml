name: Java Maven Build & Deploy

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1) 소스 가져오기
    - name: Checkout repository
      uses: actions/checkout@v3

    # 2) JDK 17 설정
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 3) Maven 빌드
    - name: Build with Maven
      run: mvn clean package -DskipTests

    # 4) JAR 아티팩트 업로드 (선택)
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: springboot-app
        path: target/*.jar

    # 5) EC2 인스턴스로 JAR 전송
    - name: Copy JAR to EC2 via SCP
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.AWS_HOST }}         # ex) 13.209.22.255
        username: ${{ secrets.AWS_USER }}     # ex) ubuntu
        key: ${{ secrets.AWS_KEY }}           # ~/.ssh/mykey2.pem 내용을 secret 로 저장
        source: target/*.jar
        target: /home/ubuntu/app/

    # 6) EC2에서 애플리케이션 실행
    - name: Run Spring Boot on EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USER }}
        key: ${{ secrets.AWS_KEY }}
        script: |
          #!/bin/bash
          set -e
          echo "▶ 기존 프로세스 종료(있다면)…"
          pkill -f 'java -jar' || true

          echo "▶ 새 JAR 백업 → 실행"
          APP_DIR=/home/ubuntu/app
          cd $APP_DIR

          # 최신 JAR 이름 추출
          JAR_NAME=$(ls -t *.jar | head -n1)

          nohup java -jar "$JAR_NAME" > app.log 2>&1 &
          echo "✅ $JAR_NAME 배포 완료"

name: Java Maven Build & Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 소스 체크아웃
      - uses: actions/checkout@v3

      # 2) JDK 17 (빌드용) 세팅
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # 3) Maven 빌드
      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      # 4) (옵션) JAR 아티팩트 업로드
      - uses: actions/upload-artifact@v4
        with:
          name: springboot-app
          path: target/*.jar

      # 5) EC2로 JAR 복사
      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_KEY }}
          source: "target/*.jar"
          target: "/home/ubuntu/app/"

      # 6) EC2에서 배포
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_KEY }}
          debug: true
          script: |
            #!/bin/bash
            set -e

            # ───────────────────────────────────────────────
            # 0. Java 17 설치 여부 확인
            # ───────────────────────────────────────────────
            if ! command -v java >/dev/null 2>&1; then
              echo "▶ Java 미설치 → 설치 진행"
              if [ -f /etc/debian_version ]; then
                sudo apt-get update -y
                sudo apt-get install -y openjdk-17-jre-headless
              else
                sudo yum install -y java-17-amazon-corretto-headless
              fi
            fi

            APP_DIR=/home/ubuntu/app
            cd "$APP_DIR"

            # ───────────────────────────────────────────────
            # 1. 이전 PID 파일 기반 프로세스 종료
            # ───────────────────────────────────────────────
            if [[ -f app.pid ]]; then
              OLD_PID=$(cat app.pid)
              if ps -p "$OLD_PID" > /dev/null 2>&1; then
                echo "▶ 이전 프로세스 종료(PID=$OLD_PID)"
                kill "$OLD_PID"
                sleep 5
              fi
            fi

            # ───────────────────────────────────────────────
            # ⚡ 8888 포트 점유 프로세스 모두 종료
            # ───────────────────────────────────────────────
            PORT=8888
            PIDS_ON_PORT=$(sudo lsof -ti tcp:${PORT} || true)
            if [[ -n "${PIDS_ON_PORT}" ]]; then
              echo "⚡ 8888 포트를 점유 중인 PID들 종료 → ${PIDS_ON_PORT}"
              echo "${PIDS_ON_PORT}" | xargs -r sudo kill
              sleep 5
            fi

            # ───────────────────────────────────────────────
            # ⚡ UFW에 8888 포트 허용 추가
            # ───────────────────────────────────────────────
            if command -v ufw >/dev/null 2>&1; then
              if sudo ufw status | grep -q inactive; then
                echo "▶ UFW가 비활성화 상태이므로 규칙만 추가"
              fi
              sudo ufw allow 8888/tcp || true
            fi

            # ───────────────────────────────────────────────
            # 2. 최신 JAR 선택
            # ───────────────────────────────────────────────
            JAR_PATH=$(find . -maxdepth 2 -name "*.jar" -type f \
                        -printf "%T@ %p\n" | sort -nr | head -n1 | cut -d' ' -f2-)
            if [[ -z "$JAR_PATH" ]]; then
              echo "❌ JAR 파일을 찾을 수 없습니다"; exit 1
            fi
            echo "▶ 실행 JAR: $JAR_PATH"

            # ───────────────────────────────────────────────
            # 3. 새 프로세스 실행 & PID 저장
            # ───────────────────────────────────────────────
            nohup java -jar "$JAR_PATH" > app.log 2>&1 &
            NEW_PID=$!
            echo "$NEW_PID" > app.pid
            echo "✅ 배포 완료(PID=$NEW_PID)"
